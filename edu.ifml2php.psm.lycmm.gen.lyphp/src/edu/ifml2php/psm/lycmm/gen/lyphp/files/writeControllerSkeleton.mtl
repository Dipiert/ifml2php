[comment encoding = UTF-8 /]
[**
 * The documentation of the module writeControllerSkeleton.
 */]
[module writeControllerSkeleton('http://www.application.org')]

[import edu::ifml2php::psm::lycmm::gen::lyphp::services::helperApplication /]
[import edu::ifml2php::psm::lycmm::gen::lyphp::main::view /]
[import edu::ifml2php::psm::lycmm::gen::lyphp::services::helperController /]
[import edu::ifml2php::psm::lycmm::gen::lyphp::services::helperLaravelInputPaths /]
[import edu::ifml2php::psm::lycmm::gen::lyphp::services::helperStringUtil /]


[**
 * The documentation of the template generateElement.
 * @param aModel
 */]


[comment]quiza pueda traer el path desde el helper y no pasarselo como param[/comment]
[template public writeControllerSkeleton(path : String, controller : Controller, appName : String)]
[file (path + controller.name + '.php', false, 'UTF-8')]
<?php

namespace [appName/]\Http\Controllers\[(path.tokenize('/'))->asSequence()->last() /];

use [appName/]\Http\Controllers\Controller;
use Illuminate\Http\Request;

class [controller.name/] extends Controller
{
[for (method : Method | controller.methods)]

   protected function [ method.name /]([for (parameter : Attribute | method.inParameters) separator(', ' )]$[parameter.name/][/for])
   {   
    [if ( method.outParameters->size() > 0)]
    	//Los parámetros ([for (parameter : Attribute | method.outParameters) separator(', ' )]$[parameter.name/][/for]) fueron modelados como de salida. Verifique si son retornados al módulo llamador o pasado a otro 
    [else]
	
    	[comment]Formatting Purpose Blank line[/comment]
	[/if] 
   }
		
	[comment]TODO:
		* Ver como obtener el scope de los métodos. No encontramos manera de hacerlo desde IFML-Metamodel aún.
		* Usar los outParameters de manera más precisa obteniendo información de los Interaction Flows.[/comment]
[/for]	

/**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index()
    {
        dd("index :)");
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create()
    {
        dd("create :)");
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        dd("request :)");
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
		dd("show :)");
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit($id)
    {
        dd("edit :)");
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
		dd("update :)");
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {
        dd("destroy :)");
    }
[comment]TODO: *Podrían usarse 2 templates, uno que coloque los métodos personalizados al comienzo y otro que los coloque al final.
Incluso, se podría poner a los métodos en un orden tal que sea significativo para facilitar la lectura.[/comment]  
[/file]

[comment][ self.registerController(controller.name) /][/comment]
[/template]

[comment][template private registerController(nameController : String)][/comment]
[template public registerController(nameController : String, namePackage : String, pv : PackageView)]
[file (self.getRoutesPath(), true, 'UTF-8')]
[comment][ self.getRoutes() /][/comment]
Route::group([ '[' /]'prefix'=>'[nameController.toLowerCase()/]'[ ']' /], function(){  
   Route::resource('','[namePackage/]Controllers\[nameController/]');
      [for (view : View | pv.views)]
	     [if (getSuffix(view.name).toString().matches(nameController))]
      Route::get('/[view.name/]', '[namePackage/]Controllers\[nameController/]@createView[view.name/]')->name('[nameController.toLowerCase()/].[view.name/]');
	[/if]
[/for]
});

[/file]
[/template]