-- @nsURI ourMM=http://www.application.org
-- @nsURI UMLMM=http://www.eclipse.org/uml2/5.0.0/UML
-- @nsURI IFMLMM=http://www.omg.org/spec/20130218/core
-- @nsURI extMM=http://www.omg.org/spec/20130218/ext

module tinyRule;
create ourm : ourMM from uml : UMLMM, ifml : IFMLMM, extm : extMM;

rule IFMLModel2ApplicationClass{
        from
 	       ifmlModel : IFMLMM!IFMLModel
        to
           app : ourMM!Application(
                    name <- ifmlModel.name,
                    aPackageModel <- ifmlModel.domainModel,
                    aPackageView <- ifmlModel.interactionFlowModel,         
                    aPackageController <- thisModule.DomainModel2PackageController(ifmlModel.domainModel)
                )		   			
}

unique lazy rule DomainModel2PackageController{
        from
            domainModel : IFMLMM!DomainModel
        to
            pc  : ourMM!PackageController(
					name <- domainModel.name,
					controllers <- UMLMM!Class.allInstances()
								->select(r|r.oclIsKindOf(UMLMM!Class)) --Es Necesario?
								->collect(r|thisModule.createController(r))
				)	
}

lazy rule createController{
	from
		class : UMLMM!Class
	to
		cont : ourMM!Controller(
			name <- class.name,
			methods <- IFMLMM!IFMLAction.allInstances()
						->select(b|b.name.toLower().endsWith(class.name.toLower())
			))				
}

rule createMethod{
	from
		ifmla : IFMLMM!IFMLAction
	to
		a : ourMM!Method(
			name <- thisModule.decapitalize(ifmla.name),
			inAttributes <- ifmla.parameters
								->select(b|b.direction = #"in" or b.direction = #inout)
								->collect(b|b.name.toLower()),
			outAttributes <- ifmla.parameters
								->select(b|b.direction = #out or b.direction = #inout)
								->collect(b|b.name.toLower())
		)		
}

rule DomainModel2PackageModel{
        from
            dm : IFMLMM!DomainModel
        to
            pm : ourMM!PackageModel(
                    name <- dm.name,
                    models <- UMLMM!Class.allInstances() 
						   ->collect(e| e)	
                 )
}

rule UMLClass2Model{
	from
		class : UMLMM!Class
	to
		model : ourMM!Model(
			name<-class.name,
			modelAttributes <- UMLMM!Property.allInstances()
							->select(e | e.namespace.name = class.name)
							->collect(e| e)			
		)
}

rule UMLproperty2ModelAttribute{
	from
		prop : UMLMM!Property
	to
		modAt : ourMM!ModelAttribute(
				name<-prop.name,
				scope <- prop.visibility.name
			)
}


lazy rule getDomainElement{
        from
            dm : IFMLMM!DomainConcept
        to
            mc : ourMM!Model(
                    name <- dm.name
                )
}

rule InteractionFlowModel2PackageView{
        from
            ifm : IFMLMM!InteractionFlowModel
        to
             pv : ourMM!PackageView(
                     name <- ifm.name,
					 views <- ifm.interactionFlowModelElements->select(f|f.oclIsKindOf(IFMLMM!ViewContainer))
                )
}


rule ViewContainer2View{
	from
		vc : IFMLMM!ViewContainer
		(not (vc.refImmediateComposite().oclIsKindOf(IFMLMM!ViewContainer)))				
	to
		v  : ourMM!View(
				name <- vc.name,
				viewComponents <- vc.viewElements->select(e | e.oclIsTypeOf(extMM!Form)),-- ver Alternativa Herencia Múltiple
				viewComponents <- vc.viewElements->select(f | f.oclIsTypeOf(IFMLMM!ViewComponent))
												 ->collect(h|h.viewComponentParts
												 	->select(b|b.oclIsTypeOf(IFMLMM!ConditionalExpression))),
				viewComponents <- IFMLMM!ViewContainer.allInstances()
										->select(a | a.refImmediateComposite() = IFMLMM!InteractionFlowModel.allInstances().first())
										->collect(f|thisModule.Landmarks2MenuItems(f)),
				viewComponents <- vc.viewElements->select(e | e.oclIsTypeOf(IFMLMM!ViewElement))
												 ->collect(f|thisModule.ViewElement2Image(f)),
			 	innerViews <- vc.viewElements->select(e| e.oclIsKindOf(IFMLMM!ViewContainer))
													->collect(e|thisModule.ViewContainer2InnerView(e))
			)
}

lazy rule ViewContainer2InnerView{
	from
		vc : IFMLMM!ViewContainer
		(vc.refImmediateComposite().oclIsKindOf(IFMLMM!ViewContainer))		
	to
		v  : ourMM!View(
				name <- vc.name,
				viewComponents <- vc.viewElements->select(e | e.oclIsTypeOf(extMM!Form)),-- ver Alternativa Herencia Múltiple
				viewComponents <- vc.viewElements->select(f | f.oclIsTypeOf(IFMLMM!ViewComponent))
												 ->collect(h|h.viewComponentParts
												 	->select(b|b.oclIsTypeOf(IFMLMM!ConditionalExpression))),
				viewComponents <- vc.viewElements->select(e | e.oclIsTypeOf(IFMLMM!ViewElement))
												 ->collect(f|thisModule.ViewElement2Image(f)),
			 	innerViews <- vc.viewElements->select(e| e.oclIsKindOf(IFMLMM!ViewContainer))
													->collect(e|thisModule.ViewContainer2InnerView(e))
			)
}


rule ConditionalExpression2Text{ 
	from
		ce : IFMLMM!ConditionalExpression
	to
		t : ourMM!Text(
			name <- ce.name,
			language <- ce.language,			
			body <- ce.body
		)
}


rule IFMLForm2Form{
	from
		frm : extMM!Form
	to
		f : ourMM!Form(
			name <- frm.name,
			tagName <- f.getTagName(),
			method <- f.getDefaultMethod(),
			htmlElements <- frm.viewComponentParts->select(e | e.oclIsTypeOf(extMM!SimpleField)),
			htmlElements <- extMM!IFMLSlot.allInstances()
							->select(e|(not(thisModule.isCheckbox(e, frm.parameters))))
												->collect(e|thisModule.IFMLSlot2RadioButton(e, e.refImmediateComposite().name)),
			htmlElements <- extMM!IFMLSlot.allInstances()
							->select(e|((thisModule.isCheckbox(e, frm.parameters))))
												->collect(e|thisModule.IFMLSlot2Checkbox(e, e.refImmediateComposite().name)),																				
			events <- thisModule.onSubmitEvent2Event(extMM!OnSubmitEvent, f.name)
		)
}


lazy rule IFMLSlot2RadioButton{
	from
		sl : extMM!IFMLSlot,
		st : String
	to
		rb : ourMM!RadioButton(
			name <- st,
			value <- sl.name,
			tagName <- rb.getTagName(),
			type <- 'radio'
		)
}

lazy rule IFMLSlot2Checkbox{
	from
		sl : extMM!IFMLSlot,
		st : String
	to
		cb : ourMM!Checkbox(
			name <- st,
			value <- sl.name,
			tagName <- cb.getTagName(),
			type <- cb.getType()
		)
}

rule SimpleField2TextField{
	from
		sf : extMM!SimpleField
	to
		f : ourMM!TextField(
			name <- thisModule.decapitalize(sf.name),
			tagName <- f.getTagName(),
			type <- f.getDefaultType()
		)
}

lazy rule onSubmitEvent2Event{
from
	ose : extMM!OnSubmitEvent,
	n	: String
to	
	e : ourMM!Event(
		handler <- extMM!OnSubmitEvent.allInstances()->select(d | d.viewElement.name.toLower() = n.toLower())	
													->collect(a | a.outInteractionFlows
													->collect(f | f.targetInteractionFlowElement)
													->collect(g | g.name)), --assuming one Submit per Form
		type <- 'OnSubmit' -- in the actual implementation
	)	
}

lazy rule Landmarks2MenuItems{
	from
		vc	: IFMLMM!ViewContainer(
			(not vc.isLandmark)
		)
	to
		an	: ourMM!Anchor(
			name <- thisModule.decapitalize(vc.name),
			hypRef <- vc.name,
			target <- an.getDefaultTarget(),
			tagName <- an.getTagName().substring(1,1)
		)	
}

lazy rule ViewElement2Image{
	from
		ve : IFMLMM!ViewElement
	to
		i : ourMM!Image(
				source <- ve.id,
				name <- ve.name,
				tagName <- 'img'
			)	
}


helper def : decapitalize(name : String) : String =
	if name.size () > 1 then
		name.substring(1,1).toLower().concat(name.substring(2,name.size()))
	else
		name.substring(1,1).toLower()
	endif;

helper context ourMM!HTMLElement def : getTagName() : String =
	 self.oclType().toString().split('!').at(2).toLower();

helper context ourMM!Anchor def : getDefaultTarget() : String = 'self';

helper context ourMM!Form def : getDefaultMethod() : String = 'POST';

helper context ourMM!TextField def : getDefaultType() : String = 'text';

helper def : isCheckbox(slot : extMM!IFMLSlot, seq : Sequence(extMM!IFMLParameters)) : Boolean =
	if (seq->includes(slot.refImmediateComposite())) and ((slot.refImmediateComposite().isMultiSelection = true)) then
		true
	else
		false
	endif;

helper context ourMM!Input def : getTagName() : String =
	'input';

helper context ourMM!Input def : getType() : String =
	if (self.oclType().toString() = 'Checkbox') then
		'check'
	else
		self.oclType().toString().split('!').at(2).toLower()
	endif;
