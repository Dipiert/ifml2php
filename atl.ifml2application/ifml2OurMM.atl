-- @nsURI ourMM=http://www.application.org
-- @nsURI UMLMM=http://www.eclipse.org/uml2/5.0.0/UML
-- @nsURI IFMLMM=http://www.omg.org/spec/20130218/core
-- @nsURI extMM=http://www.omg.org/spec/20130218/ext

module tinyRule;
create ourm : ourMM from uml : UMLMM, ifml : IFMLMM, extm : extMM;

rule IFMLModel2ApplicationClass{
        from
 	       ifmlModel : IFMLMM!IFMLModel
        to
           app : ourMM!Application(
                    name <- ifmlModel.name,
                    aPackageModel <- ifmlModel.domainModel,
                    aPackageView <- ifmlModel.interactionFlowModel,         
                    aPackageController <- thisModule.DomainModel2PackageController(ifmlModel.domainModel)
                )		   			
}

unique lazy rule DomainModel2PackageController{
        from
            domainModel : IFMLMM!DomainModel
        to
            pc  : ourMM!PackageController(
					name <- domainModel.name,
					controllers <- UMLMM!Class.allInstances()
								->select(r|r.oclIsKindOf(UMLMM!Class))
								->collect(r|thisModule.createController(r))
				)	
}

lazy rule createController{
	from
		class : UMLMM!Class
	to
		cont : ourMM!Controller(
			name <- class.name,
			methods <- IFMLMM!IFMLAction.allInstances()
						->select(b|b.name.toLower().endsWith(class.name.toLower())
			))				
}

rule createMethod{
	from
		ifmla : IFMLMM!IFMLAction
	to
		a : ourMM!Method(
			name <- thisModule.decapitalize(ifmla.name),
			inAttributes <- ifmla.parameters
								->select(b|b.direction = #"in" or b.direction = #inout)
								->collect(b|b.name.toLower()),
			outAttributes <- ifmla.parameters
								->select(b|b.direction = #out or b.direction = #inout)
								->collect(b|b.name.toLower())
		)		
}

rule DomainModel2PackageModel{
        from
            dm : IFMLMM!DomainModel
        to
            pm : ourMM!PackageModel(
                    name <- dm.name,
                    models <- UMLMM!Class.allInstances()
						   ->select(e | e.oclIsKindOf(UMLMM!Class)) -- no puede ponerse esta condición en el from?
						   ->collect(e| e)	
                 )
}

rule UMLClass2Model{
	from
		class : UMLMM!Class
	to
		model : ourMM!Model(
			name<-class.name,
			modelAttributes <- UMLMM!Property.allInstances()
							->select(e | e.namespace.name = class.name)
							->collect(e| e)			
		)
}

rule UMLproperty2ModelAttribute{
	from
		prop : UMLMM!Property
	to
		modAt : ourMM!ModelAttribute(
				name<-prop.name,
				scope <- prop.visibility.name
			)
}


lazy rule getDomainElement{
        from
            dm : IFMLMM!DomainConcept
        to
            mc : ourMM!Model(
                    name <- dm.name
                )
}

rule InteractionFlowModel2PackageView{
        from
            ifm : IFMLMM!InteractionFlowModel
        to
             pv : ourMM!PackageView(
                     name <- ifm.name,
					 views <- IFMLMM!ViewContainer.allInstances()
						   ->select(e | e.oclIsKindOf(IFMLMM!ViewContainer)) -- no puede ponerse esta condición en el from?
						   ->collect(e| e)
                )
}

rule ViewContainer2View{
	from
		vc : IFMLMM!ViewContainer
	to
		v  : ourMM!View(
				name <- vc.name,
				viewComponents <- vc.viewElements->select(e | e.oclIsTypeOf(extMM!Form)),-- ver Alternativa Herencia Múltiple
				viewComponents <- vc.viewElements->select(f | f.oclIsTypeOf(IFMLMM!ViewComponent))
												->collect(h|h.viewComponentParts)				
				-- viewComponents <- vc.viewElements->select(e | e.oclIsTypeOf(extMM!Form)) se puede append?
			)
}


rule ConditionalExpression2Text{ --Falta completar atributos
	from
		ce : IFMLMM!ConditionalExpression
	to
		t : ourMM!Text(
			name <- ce.name,
			language <- ce.language,			
			body <- ce.body
		)
}


rule IFMLForm2Form{
	from
		frm : extMM!Form
	to
		f : ourMM!Form(
			name <- frm.name,
			tagName <- f.getTagName(),
			isPairedTag <- true,
			isEmpty <- false,
			method <- 'POST',
			htmlElements <- frm.viewComponentParts->select(e | e.oclIsTypeOf(extMM!SimpleField)),
			events <- thisModule.onSubmitEvent2Event(extMM!OnSubmitEvent, f.name)
		)
}

--rule OnSelectEvent2Anchor{
--	from
--		ifmlm : extMM!OnSelectEvent
--	to
--		ourm : ourMM!Anchor(
--				hypRef <- extMM!OnSelectEvent.allInstances()->collect(e | e.outInteractionFlows
--													->collect(f | f.targetInteractionFlowElement)
--													->collect(g | g.name))
--		)
--}
		
rule SimpleField2Input{
	from
		sf : extMM!SimpleField
	to
		f : ourMM!Input(
			name <- thisModule.decapitalize(sf.name),
			tagName <- f.getTagName(),
			isPairedTag <- true,
			isEmpty <- false,
			type <- 'text'
		)
}

lazy rule onSubmitEvent2Event{
from
	ose : extMM!OnSubmitEvent,
	n	: String
to	
	e : ourMM!Event(
		handler <- extMM!OnSubmitEvent.allInstances()->select(d | d.viewElement.name.toLower() = n.toLower())	
													->collect(e | e.outInteractionFlows
													->collect(f | f.targetInteractionFlowElement)
													->collect(g | g.name)), --assuming one Submit per Form
		type <- 'OnSubmit' -- in the actual implementation
	)	
}


helper def : decapitalize(name : String) : String =
	if name.size () > 1 then
		name.substring(1,1).toLower().concat(name.substring(2,name.size()))
	else
		name.substring(1,1).toLower()
	endif;

helper context ourMM!HTMLElement def : getTagName() : String =
	 self.oclType().toString().split('!').at(2).toLower();
