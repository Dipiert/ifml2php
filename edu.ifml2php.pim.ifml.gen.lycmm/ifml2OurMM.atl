-- @nsURI ourMM=http://www.application.org 
-- @nsURI UMLMM=http://www.eclipse.org/uml2/5.0.0/UML
-- @nsURI IFMLMM=http://www.omg.org/spec/20130218/core
-- @nsURI extMM=http://www.omg.org/spec/20130218/ext

module tinyRule;
create ourm : ourMM from uml : UMLMM, ifml : IFMLMM, extm : extMM;

uses ifmlCoreLibrary; uses ifmlExtLibrary; uses mvcLibrary; uses systemLibrary;

--- IFMLModel2ApplicationClass
--- puede entenderse la transformación entre estas 2 metaclases desde el punto 
--- de vista de que un IFMLModel es el contenedor del resto de los elementos de
--- modelo, y por ello, el de más alto nivel, al igual que una Application en el
--- metamodelo al que conforman los modelos destino.
rule IFMLModel2ApplicationClass{
  from
    ifmlModel : IFMLMM!IFMLModel
  to
    app : ourMM!Application(
      name <- ifmlModel.name,
      aPackageModel <- ifmlModel.domainModel,
      aPackageView <- ifmlModel.interactionFlowModel,         
      aPackageController <- thisModule.DomainModel2PackageController(ifmlModel.domainModel)
    )           
}

--- DomainModel2PackageController
--- desde que los IFML Actions representan porciones de la lógica de negocios
--- pero no las agrupa en conceptos de algún nivel superior, es dificil poder
--- establecer una relación directa entre el metamodelo de IFML y un paquete 
--- de controladores PHPFW. Esta regla aprovecha la cardinalidad uno a uno
--- entre modelo de dominio IFML y paquete de controladores PHPFW y asume un
--- controlador por cada clase de dominio UML.
lazy rule DomainModel2PackageController{
  from
    domainModel : IFMLMM!DomainModel
  to
    pc  : ourMM!PackageController(
      name <- domainModel.name,
      controllers <- UMLMM!Class.allInstances()
                      ->collect(r|thisModule.UMLClass2Controller(r))
    ) 
}
--- UMLClass2Controller
--- Ver Justificación de la regla “DomainModel2PackageController”.
lazy rule UMLClass2Controller{
  from
    class : UMLMM!Class
  to
    cont : ourMM!Controller(
      name <- class.name,
      methods <- IFMLMM!IFMLAction.allInstances()
                  ->select(b|b.name.toLower().endsWith(class.name.toLower())
      ))        
}

--- IFMLAction2Method
--- los IFML Action representan porciones de la lógica de negocios de la 
--- aplicación. Esa lógica de negocios es implementada, en frameworks de 
--- desarrollo para lenguajes Orientados a Objetos, utilizando métodos.
rule IFMLAction2Method{
  from
    ifmla : IFMLMM!IFMLAction
  to
    a : ourMM!Method(
      name <- ifmla.name.decapitalize(),
      inParameters <- ifmla.getInParameters(),
      outParameters <- ifmla.getOutParameters()
    )   
}

--- Parameter2Attribute: una instancia de un IFML Parameter es un nombre tipado
--- capaz de mantener valores, y por ello, puede entendérsela como atributo. 
lazy rule Parameter2Attribute{
  from
    st : String
  to
    at : ourMM!Attribute(
      name <- st.toLower()  
    )
}

--- DomainModel2PackageModel
--- desde que el DomainModel se define como contenedor de todos los elementos
--- de contenido utilizados por ViewComponents. Puede verse una clara relación
--- con el concepto de PackageModel.
rule DomainModel2PackageModel{
  from
    dm : IFMLMM!DomainModel
  to
    pm : ourMM!PackageModel(
      name <- dm.name,
      models <- UMLMM!Class.allInstances()  
    )
}

--- UMLClass2Model: desde que una clase puede utilizarse para especificar la
--- estructura que caracteriza un determinado objeto, una clase se puede 
--- transformar en una metaclase Model que cumpla ese mismo rol en el metamodelo PHPFW.
rule UMLClass2Model{
  from
    class : UMLMM!Class
  to
    model : ourMM!Model(
      name<-class.name,
      attributes <- UMLMM!Property.allInstances()
                      ->select(e | e.namespace.name = class.name),
      primaryKeys <- UMLMM!Property.allInstances()
                      ->select(e | e.namespace.name = class.name)
    )
}

--- UMLProperty2Attribute: a excepción de la regla UMLProperty2Identifier, esta regla se
--- disparar para todas las UML Properties que no son IDs.
rule UMLProperty2Attribute{
  from
    prop : UMLMM!Property
	(not prop.isID)
  to
    modAt : ourMM!Attribute(
      name<-prop.name	  
    )
}

--- UMLProperty2Identifier: algunas de las propiedades de los modelos pueden 
--- utilizarse para identificar unívocamente un objeto, esas propiedades de 
--- UML pueden transformarse en Identifiers.
rule UMLProperty2Identifier{
  from
    prop : UMLMM!Property
	(prop.isID)
  to
    modAt : ourMM!Identifier(
      name<-prop.name	  
    )
}

--- InteractionFlowModel2PackageView
--- Esta regla se basa en la idea de que un InteractionFlowModel agrega todos
--- los elementos que modelan la interacción con el usuario y siguiendo un
--- patrón arquitectónico MVC el usuario interactúa con la vista.
rule InteractionFlowModel2PackageView{
  from
    ifm : IFMLMM!InteractionFlowModel
  to
    pv : ourMM!PackageView(
      name <- ifm.name,
      views <- ifm.interactionFlowModelElements
                ->select(f|f.oclIsKindOf(IFMLMM!ViewContainer))
    )
}
--- ViewContainer2View: ViewContainer (View) refieren al mismo concepto en 
--- metamodelo origen (destino).
rule ViewContainer2View{
  from
    vc : IFMLMM!ViewContainer
    (not (vc.refImmediateComposite().oclIsKindOf(IFMLMM!ViewContainer)))        
  to
    v  : ourMM!View(
      name <- vc.name,
      viewComponents <- vc.getViewComponents(), --TODO: asegurar que se mantenga el orden de los elementos generados        
      innerViews <- vc.viewElements->select(e| e.oclIsKindOf(IFMLMM!ViewContainer))
                                    ->collect(e|thisModule.ViewContainer2InnerView(e))
    )
}

--- ViewContainer2InnerView: ViewContainer (View) refieren al mismo concepto en
--- metamodelo origen (destino). Definimos como Inner View a una vista que está
--- contenida dentro de otra.
lazy rule ViewContainer2InnerView{
  from
    vc : IFMLMM!ViewContainer
    (vc.refImmediateComposite().oclIsKindOf(IFMLMM!ViewContainer))    
  to
    v  : ourMM!View(
      name <- vc.name,
      viewComponents <- vc.getViewComponents(),
      innerViews <- vc.viewElements->select(e| e.oclIsKindOf(IFMLMM!ViewContainer))
                                    ->collect(e|thisModule.ViewContainer2InnerView(e))
    )
}

--- ConditionalExpression2Text
--- Desde que es razonable asumir que el texto presentado en la aplicación esté 
--- guardado en fuentes de datos externas, las expresiones condicionales -que son
--- expresiones predefinidas de consulta asociadas con DataBindings- son un buen
--- candidato para representar la consulta de dicho texto. Se utiliza <p> como nombre
--- de tag HTML por defecto en la metaclase Text.
rule ConditionalExpression2Text{ 
  from
    ce : IFMLMM!ConditionalExpression
  to
    t : ourMM!Text(
      tagName <- #p,
      name <- ce.name,
      language <- ce.language,      
      content <- ce.body
    )
}

--- IFMLForm2Form
--- este concepto es el mismo en ambos metamodelos. A saber, la representación
--- de un formulario de entrada donde el usuario puede enviar información entre
--- páginas. Por defecto, se asume POST por método de envío y self como target.
rule IFMLForm2Form{
  from
    frm : extMM!Form
  to
    f : ourMM!Form(
      name <- frm.name,
      tagName <- #form,
      method <- #post,
      target <- f.getDefaultTarget(),
      htmlElements <- frm.getHTMLElements(),
      events <- thisModule.OnSubmitEvent2Event(f.name)
    )
} 

--- IFMLSlot2RadioButton
--- un IFML Slot representa los valores que puede asumir un determinado campo 
--- del formulario. Esta regla es invocada en los casos en el que dicho campo
--- es univaluado.
lazy rule IFMLSlot2RadioButton{
  from
    sl : extMM!IFMLSlot,
    st : String
  to
    rb : ourMM!RadioButton(
      name <- st,
      value <- sl.name,
      tagName <- #input,
      type <- #radio,
      isPairedTag <- false
    )
}

--- IFMLSlot2Checkbox
--- un IFML Slot representa los valores que puede asumir un determinado campo del
--- formulario. Esta regla es invocada en los casos en el que dicho campo pueda
--- ser multivaluado.
lazy rule IFMLSlot2Checkbox{
  from
    sl : extMM!IFMLSlot,
    st : String
  to
    cb : ourMM!Checkbox(
      name <- st,
      value <- sl.name,
      tagName <- #input,
      type <- #checkbox,
      isPairedTag <- false
    )
}

--- un SimpleField de IFML es un un campo que puede capturar entradas textuales del 
--- usuario, al igual que un textfield (input type text) de HTML.
rule SimpleField2TextField{
  from
    sf : extMM!SimpleField
  to
    f : ourMM!TextField(
      name <- sf.name.decapitalize(),
      tagName <- #input,
      type <- #text,
      isPairedTag <- false
    )
}

--- OnSubmitEvent2Event
--- El concepto de evento es el mismo en el metamodelo origen y el destino, 
--- por lo cual la transformación resulta natural. El nombre corresponde a que
--- en esta implementación, en vistas a cubrir los casos de estudio y sus
--- criterios de éxito, solo se transforma los eventos OnSubmit, pero nada
--- restringe que no puedan tratarse otros eventos.
lazy rule OnSubmitEvent2Event{
  from
    n : String
  to  
    e : ourMM!Event(
      handler <- e.getHandler(n),
      type <- e.getDefaultEventType()
    ) 
}

--- Landmarks2MenuItems
--- esta regla transforma todos los ViewContainers que son landmark a items de
--- un menú. Similar al funcionamiento de la herramienta WebRatio, que incluye
--- la implementación paga pero más extendida de IFML.
lazy rule Landmarks2MenuItems{
  from
    vc  : IFMLMM!ViewContainer((vc.isLandmark))
  to
    an  : ourMM!Anchor(
      name <- vc.name.decapitalize(),
      hypRef <- vc.name,
      target <- an.getDefaultTarget(),
      tagName <- #a
    ) 
}

--- ViewElement2Image: desde que un ViewElement son elementos de la interfaz de usuario
--- que muestran contenido, contiene la estructura necesaria como para ser transformada en un Image. 
lazy rule ViewElement2Image{
  from
    ve : IFMLMM!ViewElement
  to
    i : ourMM!Image(
      source <- ve.id,
      name <- ve.name,
      tagName <- #img
    ) 
}
