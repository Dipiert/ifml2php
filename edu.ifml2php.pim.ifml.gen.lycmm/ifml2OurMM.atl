-- @nsURI ourMM=http://www.application.org
-- @nsURI UMLMM=http://www.eclipse.org/uml2/5.0.0/UML
-- @nsURI IFMLMM=http://www.omg.org/spec/20130218/core
-- @nsURI extMM=http://www.omg.org/spec/20130218/ext

module tinyRule;
create ourm : ourMM from uml : UMLMM, ifml : IFMLMM, extm : extMM;

rule IFMLModel2ApplicationClass{
        from
 	       ifmlModel : IFMLMM!IFMLModel
        to
           app : ourMM!Application(
                    name <- ifmlModel.name,
                    aPackageModel <- ifmlModel.domainModel,
                    aPackageView <- ifmlModel.interactionFlowModel,         
                    aPackageController <- thisModule.DomainModel2PackageController(ifmlModel.domainModel)
                )		   			
}

lazy rule DomainModel2PackageController{
        from
            domainModel : IFMLMM!DomainModel
        to
            pc  : ourMM!PackageController(
					name <- domainModel.name,
					controllers <- UMLMM!Class.allInstances()
								->collect(r|thisModule.UMLClass2Controller(r))
				)	
}

lazy rule UMLClass2Controller{
	from
		class : UMLMM!Class
	to
		cont : ourMM!Controller(
			name <- class.name,
			methods <- IFMLMM!IFMLAction.allInstances()
						->select(b|b.name.toLower().endsWith(class.name.toLower())
			))				
}

rule IFMLAction2Method{
	from
		ifmla : IFMLMM!IFMLAction
	to
		a : ourMM!Method(
			name <- thisModule.decapitalize(ifmla.name),
			inParameters <- ifmla.getInParameters(),
			outParameters <- ifmla.getOutParameters()
		)		
}

lazy rule Parameter2Attribute{
	from
		st : String
	to
		at : ourMM!Attribute(
			name <- st.toLower()	
		)
}

rule DomainModel2PackageModel{
        from
            dm : IFMLMM!DomainModel
        to
            pm : ourMM!PackageModel(
                    name <- dm.name,
                    models <- UMLMM!Class.allInstances() 
						   ->collect(e| e)	
                 )
}

rule UMLClass2Model{
	from
		class : UMLMM!Class
	to
		model : ourMM!Model(
			name<-class.name,
			attributes <- UMLMM!Property.allInstances()
							->select(e | e.namespace.name = class.name)
							->collect(e| e)			
		)
}

rule UMLproperty2ModelAttribute{
	from
		prop : UMLMM!Property
	to
		modAt : ourMM!Attribute(
				name<-prop.name
			)
}

rule InteractionFlowModel2PackageView{
        from
            ifm : IFMLMM!InteractionFlowModel
        to
             pv : ourMM!PackageView(
                     name <- ifm.name,
					 views <- ifm.interactionFlowModelElements->select(f|f.oclIsKindOf(IFMLMM!ViewContainer))
                )
}

rule ViewContainer2View{
	from
		vc : IFMLMM!ViewContainer
		(not (vc.refImmediateComposite().oclIsKindOf(IFMLMM!ViewContainer)))				
	to
		v  : ourMM!View(
				name <- vc.name,
				viewComponents <- vc.getViewComponents(),					
			 	innerViews <- vc.viewElements->select(e| e.oclIsKindOf(IFMLMM!ViewContainer))
													->collect(e|thisModule.ViewContainer2InnerView(e))
			)
}

lazy rule ViewContainer2InnerView{
	from
		vc : IFMLMM!ViewContainer
		(vc.refImmediateComposite().oclIsKindOf(IFMLMM!ViewContainer))		
	to
		v  : ourMM!View(
				name <- vc.name,
				viewComponents <- vc.getViewComponents(),
			 	innerViews <- vc.viewElements->select(e| e.oclIsKindOf(IFMLMM!ViewContainer))
													->collect(e|thisModule.ViewContainer2InnerView(e))
			)
}

rule ConditionalExpression2Text{ 
	from
		ce : IFMLMM!ConditionalExpression
	to
		t : ourMM!Text(
			tagName <- #p,
			name <- ce.name,
			language <- ce.language,			
			content <- ce.body
		)
}

rule IFMLForm2Form{
	from
		frm : extMM!Form
	to
		f : ourMM!Form(
			name <- frm.name,
			tagName <- #form,
			method <- #post,
			htmlElements <- frm.getHTMLElements(),
			events <- thisModule.OnSubmitEvent2Event(f.name)
			
		)
}	

lazy rule IFMLSlot2RadioButton{
	from
		sl : extMM!IFMLSlot,
		st : String
	to
		rb : ourMM!RadioButton(
			name <- st,
			value <- sl.name,
			tagName <- #input,
			type <- #radio,
			isPairedTag <- false
		)
}

lazy rule IFMLSlot2Checkbox{
	from
		sl : extMM!IFMLSlot,
		st : String
	to
		cb : ourMM!Checkbox(
			name <- st,
			value <- sl.name,
			tagName <- #input,
			type <- #checkbox,
			isPairedTag <- false
		)
}

rule SimpleField2TextField{
	from
		sf : extMM!SimpleField
	to
		f : ourMM!TextField(
			name <- thisModule.decapitalize(sf.name),
			tagName <- #input,
			type <- #text,
			isPairedTag <- false
		)
}

lazy rule OnSubmitEvent2Event{
	from
		n	: String
	to	
		e : ourMM!Event(
			handler <- thisModule.getHandler(n),
			type <- thisModule.getDefaultEventType()
		)	
}

lazy rule Landmarks2MenuItems{
	from
		vc	: IFMLMM!ViewContainer(
			(not vc.isLandmark)
		)
	to
		an	: ourMM!Anchor(
			name <- thisModule.decapitalize(vc.name),
			hypRef <- vc.name,
			target <- an.getDefaultTarget(),
			tagName <- #a
		)	
}

lazy rule ViewElement2Image{
	from
		ve : IFMLMM!ViewElement
	to
		i : ourMM!Image(
				source <- ve.id,
				name <- ve.name,
				tagName <- #img
			)	
}

helper def : decapitalize(name : String) : String =
	if name.size () > 1 then
		name.substring(1,1).toLower().concat(name.substring(2,name.size()))
	else
		name.substring(1,1).toLower()
	endif;

helper context ourMM!Anchor def : getDefaultTarget() : String = 'self';

helper def : areRelatives(child : OclAny, seq : Sequence(OclAny)) : Boolean =
	seq->includes(child);

helper def : isCheckbox(parent : OclAny) : Boolean =
	parent.isMultiSelection;

helper context IFMLMM!ViewContainer def : getAnchors() : Sequence(ourMM!Anchor) =
	IFMLMM!ViewContainer.allInstances()
			->select(a | (a.refImmediateComposite() = IFMLMM!InteractionFlowModel.allInstances().first()) and (a <> self))
			->collect(f|thisModule.Landmarks2MenuItems(f));

helper context extMM!Form def : getHTMLElements() : Sequence(ourMM!HTMLElements) =
	Sequence{self.getSimpleFields(),self.getSelectionFields()};

helper context extMM!Form def : getSimpleFields() : Sequence(ourMM!TextField) =
	self.viewComponentParts->select(e | e.oclIsTypeOf(extMM!SimpleField));
			
helper context extMM!Form def : getSelectionFields() : Sequence(ourMM!Input) =
	Sequence{extMM!IFMLSlot.allInstances()
					->select(e|(thisModule.areRelatives(e.refImmediateComposite(), self.parameters)))
					->select(e|(not(thisModule.isCheckbox(e.refImmediateComposite()))))
					->collect(e|thisModule.IFMLSlot2RadioButton(e, e.refImmediateComposite().name)),
			extMM!IFMLSlot.allInstances()
					->select(e|(thisModule.areRelatives(e.refImmediateComposite(), self.parameters)))
					->select(e|((thisModule.isCheckbox(e.refImmediateComposite()))))							
					->collect(e|thisModule.IFMLSlot2Checkbox(e, e.refImmediateComposite().name))};
					
helper context IFMLMM!IFMLAction def : getInParameters() : Sequence(ourMM!Attribute) =
	self.parameters->select(b|b.direction = #"in" or b.direction = #inout)
					->collect(b|thisModule.Parameter2Attribute(b.name));	

helper context IFMLMM!IFMLAction def : getOutParameters() : Sequence(ourMM!Attribute) =
	self.parameters->select(b|b.direction = #out or b.direction = #inout)
					->collect(b|thisModule.parameters2Attributes(b.name));

helper context IFMLMM!ViewContainer def : getViewComponents() : Sequence(ourMM!ViewComponent) =
	Sequence{
	self.viewElements->select(e | e.oclIsTypeOf(extMM!Form)),
	self.viewElements->select(f | f.oclIsTypeOf(IFMLMM!ViewComponent))
						->collect(h|h.viewComponentParts
	       				->select(b|b.oclIsTypeOf(IFMLMM!ConditionalExpression))),
	self.viewElements->select(e | e.oclIsTypeOf(IFMLMM!ViewElement))
						->collect(f|thisModule.ViewElement2Image(f)),
	if (not (self.refImmediateComposite().oclIsKindOf(IFMLMM!ViewContainer))) then
		self.getAnchors()
	else
		Sequence{}
	endif};
	
helper def : getDefaultEventType() : ourMM!EventType  = #onSubmit; -- in the actual implementation 

helper def : getHandler (n : String) : String =
	extMM!OnSubmitEvent.allInstances()->select(d | d.viewElement.name.toLower() = n.toLower())	
														->collect(a | a.outInteractionFlows
														->collect(f | f.targetInteractionFlowElement)
														->collect(g | thisModule.decapitalize(g.name))); --assuming one Submit per Form