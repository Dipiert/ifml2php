library ifmlLibrary;

helper context IFMLMM!ViewContainer def : getAnchors() : Sequence(ourMM!Anchor) =
	IFMLMM!ViewContainer.allInstances()
			->select(a | (a.refImmediateComposite() = IFMLMM!InteractionFlowModel.allInstances().first()) and (a <> self))
			->collect(f|thisModule.Landmarks2MenuItems(f));

helper context IFMLMM!IFMLAction def : getInParameters() : Sequence(ourMM!Attribute) =
	self.parameters->select(b|b.direction = #"in" or b.direction = #inout)
					->collect(b|thisModule.Parameter2Attribute(b.name));	

helper context IFMLMM!IFMLAction def : getOutParameters() : Sequence(ourMM!Attribute) =
	self.parameters->select(b|b.direction = #out or b.direction = #inout)
					->collect(b|thisModule.parameters2Attributes(b.name));

helper context IFMLMM!ViewElement def : getInputFields() : Sequence(ourMM!Input) =
	Sequence{self.getSimpleFields(),self.getSelectionFields()};

helper context IFMLMM!ViewContainer def : getViewComponents() : Sequence(ourMM!ViewComponent) =
	Sequence{
		if (not (self.refImmediateComposite().oclIsKindOf(IFMLMM!ViewContainer))) then
			self.getAnchors()			
		else
			Sequence{}
		endif,
		self.getInputFields(),
		self.getViewComponentsParts(),
		self.getImages(),
		self.getForms()
	};
	
helper context IFMLMM!ViewContainer def : getViewComponentsParts() : Sequence(ourMM!ViewComponent) =
	Sequence {
	self.viewElements->select(f | f.oclIsTypeOf(IFMLMM!ViewComponent))
		      		 ->collect(h|h.viewComponentParts
	       			   ->select(b|b.oclIsTypeOf(IFMLMM!ConditionalExpression)))
	};

helper context IFMLMM!ViewContainer def : getImages() : Sequence(ourMM!Image) =
	Sequence {
	self.viewElements->select(e | e.oclIsTypeOf(IFMLMM!ViewElement))
					 ->collect(f|thisModule.ViewElement2Image(f))
	};
	
helper context IFMLMM!ViewContainer def : getForms() : Sequence(ourMM!Form) =
	Sequence {
		self.viewElements->select(e | e.oclIsTypeOf(extMM!Form))
	};