library ifmlLibrary;

helper context IFMLMM!ViewContainer def : getAnchors() : Sequence(ourMM!Anchor) =
  IFMLMM!ViewContainer.allInstances()
                        ->select(a | (a.refImmediateComposite() = IFMLMM!InteractionFlowModel.allInstances().first()) and (a <> self))
                        ->collect(f|thisModule.Landmarks2MenuItems(f));

helper context IFMLMM!IFMLAction def : getInParameters() : Sequence(ourMM!Attribute) =
  self.parameters->select(b|b.direction = #"in" or b.direction = #inout)
                  ->collect(b|thisModule.Parameter2Attribute(b.name));  

helper context IFMLMM!IFMLAction def : getOutParameters() : Sequence(ourMM!Attribute) =
  self.parameters->select(b|b.direction = #out or b.direction = #inout)
                  ->collect(b|thisModule.parameters2Attributes(b.name));

helper context IFMLMM!ViewElement def : getHTMLElements() : Sequence(ourMM!HTMLElements) =
  Sequence{self.getSimpleFields(),self.getSelectionFields()};

helper context IFMLMM!ViewContainer def : getViewComponents() : Sequence(ourMM!ViewComponent) =
  Sequence{
      if (not (self.refImmediateComposite().oclIsKindOf(IFMLMM!ViewContainer))) then
        self.getAnchors()     
      else
        Sequence{}
      endif,
    self.getHTMLElements(),
    self.viewElements->select(f | f.oclIsTypeOf(IFMLMM!ViewComponent))
                      ->collect(h|h.viewComponentParts
                      ->select(b|b.oclIsTypeOf(IFMLMM!ConditionalExpression))),
    self.viewElements->select(e | e.oclIsTypeOf(IFMLMM!ViewElement))
                      ->collect(f|thisModule.ViewElement2Image(f)),
    self.viewElements->select(e | e.oclIsTypeOf(extMM!Form))
};

helper context IFMLMM!ViewElement def : getSelectionFields() : Sequence(ourMM!Input) =
  Sequence{
    extMM!IFMLSlot.allInstances()
                    ->select(e|self.parameters->includes(e.refImmediateComposite()))
                    ->select(e|(not(e.refImmediateComposite().isCheckbox())))
                    ->collect(e|thisModule.IFMLSlot2RadioButton(e, e.refImmediateComposite().name)),
    extMM!IFMLSlot.allInstances()
                    ->select(e|self.parameters->includes(e.refImmediateComposite()))
                    ->select(e|((e.refImmediateComposite().isCheckbox())))              
                    ->collect(e|thisModule.IFMLSlot2Checkbox(e, e.refImmediateComposite().name))};
