[comment encoding = UTF-8 /]
[**
 * The documentation of the module writeView.
 */]
[module writeView('http://www.application.org')]

[import services::helperStringUtil /]
[import services::helperYii2InputPaths /]
[import common::stringUtils /]
[import common::writeIncludes /]
[**
 * The documentation of the template generateElement.
 * @param aModel
 */]

[template public writeView(path : String, view : View, pcName : String, pvName : String)]
[file (path + view.name + '.php', false, 'UTF-8')]
[comment]TODO: No es necesario pasarle la vista porque está dentro del package[/comment]
[ writeIncludes(view) /]
<!DOCTYPE html>
[for (viewComponent : ViewComponent | view.viewComponents)]
	[if (viewComponent.oclIsTypeOf(Anchor))]
		[let a : Anchor = viewComponent][comment]En lugar de usar los pairedTag y emptyTag casteamos el viewComponent a Anchor. Esto simplifica el código y mejora la legibilidad a la vez que permite flexibilidad en la implementación (podría no hacerse el cast y utilizar estos atributos)[/comment]
			[if (view.name.strcmp(a.hypRef) <> 0)]
<?= Html::a('[a.name.replaceAll('([A-Z])', ' $1' ).toUpperFirst() /]', Url::to([ '[' /]'[self.getSuffix(a.name).toLower()/]/view-[camelCase2CaterpillarCase(a.hypRef)/]'])) ?>
[comment]Para no definir exhaustivamente y con código estático los atributos de los HTMLElements, podría utilizarselos como su representación ECore (EAttributes). El problema que surge es que EAttribute no tiene algo así como un value más allá de default (lo cuál es totalmente correcto), por lo cual tendríamos que necesitar aún castear ese HTMLElement a un elemento determinado, por lo cual no se aprovecharía la mayor ventaja de este enfoque: permitir la adición de atributos a los HTMLElement (por ej., conforme a alguna nueva especificación) en el metamodelo, sin tener que modificar las reglas -al menos- M2T. Nótese que también este enfoque aumentaría la abstracción del metamodelo de los frameworks PHP(lo cual no es malo) pero haría perder expresividad a los modelos que lo conformen[/comment]
			[/if]
		[/let]
	[/if]
		[if (viewComponent.oclIsTypeOf(Text))]
			[let t : Text = viewComponent]
<?= Html::tag('[ t.tagName /]', '[ t.content /]', ['['/]'data-language' => '[ t._language /]', 'id' => '[ t.name /]']) ?> [comment NO TESTED YET/]
			[/let]
		[/if]
		[if (viewComponent.oclIsTypeOf(Checkbox))]	
			[let cb : Checkbox = viewComponent]
<?= Html::checkbox('[cb.name/][ '[' /][ ']' /]' ,false, ['['/]'value' => '[cb.value/]']) ?>
			[/let] 		
		[/if]
		[if (viewComponent.oclIsTypeOf(RadioButton))]
			[let rb : RadioButton = viewComponent]
<?= Html::radio('['['/]r.name/]', false, ['['/]'value' => '[ rb.value /]']) ?> [comment NO TESTED YET/]
			[/let]			
		[/if]	
		[if (viewComponent.oclIsTypeOf(Image))]	
			[let i : Image = viewComponent]
<?= Html::img('[ i.source /]', ['['/]'alt' => '[ i.name /]']) ?> [comment NO TESTED YET/]
			[/let]
		[/if]
		[if (viewComponent.oclIsTypeOf(Form))]
			[let f : Form = viewComponent]
				[for (event : Event | f.events)]
					[let actionName : String = camelCase2CaterpillarCase(event.handler)]
						[let formHandler : String = getSuffix(view.name).toLower()]
<?= Html::beginForm(['['/]'[formHandler + '/' + actionName /]'], '[ f.method /]', ['['/]'name' => '[ f.name /]' ]) ?>
						[/let]
					[/let]
				[/for]				
				[for (htmle : HTMLElement | f.htmlElements)]
						[if (htmle.oclIsTypeOf(TextField))]	
							[let tf : TextField = htmle]
<?= Html::input('text', '[ tf.name /]', null, ['['/]]) ?> [comment NO TESTED YET/]
							[/let]
						[/if]
						[if (htmle.oclIsTypeOf(Checkbox))]			
							[let cb : Checkbox = htmle]
<?= Html::checkbox('[cb.name/][ '[' /][ ']' /]' ,false, ['['/]'value' => '[cb.value/]']) ?>
							[/let]				
						[/if]
						[if (htmle.oclIsTypeOf(RadioButton))]
							[let rb :RadioButton = htmle]
<?= Html::radio('[rb.name/]', false, ['['/]'value' => '[ rb.value /]']) ?> [comment NO TESTED YET/]
							[/let]
						[/if]					 
				[/for][comment]no contemplamos forms que contengan forms, anchors, textos ni imágenes[/comment]					
				[for (event : Event | f.events)]
					[if (event.type.toString().matches('onSubmit') )]
<?= Html::submitButton('Enviar', ['['/]]) ?>
					[/if] 
				[/for]		
<?= Html::endForm() ?>
			[/let]			
		[/if]
	[/for]
	[for (iv : View | view.innerViews)]
<?php $this->render('[iv.name /]'); ?>
	[/for]

[/file]
[/template]


[template public getViewConstructors(path : String, controllerName : String, pv : PackageView)]
[file (path + controllerName + 'Controller.php', true, 'UTF-8')]
[for (view : View | pv.views) after ('\n}')]
   [if (getSuffix(view.name).toString().matches(controllerName))]
   function actionView[ view.name /]()
   {
        return $this->render('/[pv.name/]Views/[ view.name /]');
   }
   [/if]
[/for]
[/file]
[/template]