[comment encoding = UTF-8 /]
[**
 * The documentation of the module writeModelSkeleton.
 */]
[module writeModelSkeleton('http://www.application.org/coreMVC')]


[**
 * The documentation of the template generateElement.
 * @param aModel
 */]

[template public writeModelSkeleton(appName : String, path : String, model : Model)]

[file (path + model.name + '.php', false, 'UTF-8')]
<?php

namespace [ appName /]\[(path.tokenize('/'))->asSequence()->last() /];
	
use Illuminate\Database\Eloquent\Model;
//[protected ('protected')]
//[/protected]

/*
@generated NOT
*/		
class [model.name /] extends Model
{
	[if (not model.primaryKeys->select(e|e.oclIsTypeOf(Identifier))->isEmpty())]
		public $primaryKey = '[model.primaryKeys->first().name/]';
		[if (model.primaryKeys->select(e|e.oclIsTypeOf(Identifier))->size() > 1)]				
		/*
			En el modelo fue definida una clave primaria compuesta. Al momento Eloquent no lo soporta. Los atributos modelados como primaryKey son:
			[for (id : Identifier | model.primaryKeys->select(e|e.oclIsTypeOf(Identifier))) separator(', ')]'[id.name/]'[/for]
			https://github.com/laravel/framework/issues/5355
		*/				
		[/if]
	[/if]
	
	
	protected $table = '[model.name.toLowerCase() /]' ; 
	protected $fillable = [ '[' /] [for (at : Attribute | model.eAllContents(Attribute)) separator(', ')]
'[at.name/]'[/for]
[ ']' /];
	[comment]TODO:
		* se podrÃ­an generar las relaciones entre modelos para la persistencia:
		public function othermodel(){
			return $this->typeRelation(othermodelUri)...
		}[/comment]
	
}
[/file]
[/template]